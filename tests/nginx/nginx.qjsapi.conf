# nginx.0.conf
user  nginx;
worker_processes  3;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

env NORENYE_PERIODIC;
env NORENYE_MODE;

load_module modules/ngx_http_js_module.so;
events {
    worker_connections  1024;
}
http {
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    log_format  json escape=json  '{"remote_addr":"$remote_addr","remote_user":"$remote_user",'
                      '"time_local":"$time_local","request":"$request","status":$status,'
                      '"body_bytes_sent":$body_bytes_sent,"http_referer":"$http_referer",'
                      '"http_user_agent":"$http_user_agent","http_x_forwarded_for":"$http_x_forwarded_for",'
                      '"http_host":"$http_host","http_cookie":"$http_cookie","request_body":"$request_body",'
                      '"proxy_host":"$proxy_host","norenye_internal_target":"$norenye_internal_target",'
                      '"norenye_target":"$norenye_target","norenye_fail_root":"$norenye_fail_root",'
                      '"norenye_fail":"$norenye_fail","server_port":"$server_port"}';
    log_subrequest on;
    access_log  /var/log/nginx/access.log  json;

    sendfile        on;
    #tcp_nopush     on;
    keepalive_timeout  65;
    #gzip  on;

    js_engine qjs;
    js_path /etc/nginx/js/;
    js_import norenye.js;
    js_shared_dict_zone zone=norenye:1M;
    map $norenye_fail$uri $norenye_fail_root {
        1/ 1;
        default 0;
    }
    server {
        listen 8080;
        server_name *.example.com;
        root /usr/share/nginx/html;
        # See: https://github.com/nginx/njs/issues/907
        # Normal Request object can use any nginx variable,
        # but js_periodic creates pseudo-request that can see
        # only variables from core (and js) module (map/js_var directives).
        js_var $norenye_config '/etc/nginx/norenye.json';
        js_var $norenye_shared_dict norenye;
        #js_var $norenye_periodic_disable 1;
        js_set $norenye_fail norenye.getfail;
        js_set $norenye_target norenye.gettarget;
        js_set $norenye_internal_target norenye.getinttarget;
        location @noop {
            return 204;
        }
        location @periodic {
            js_periodic norenye.periodic interval=60s;  # update hosts from `service.url` (see config below)
            js_periodic norenye.reloadconf interval=9999999999;
        }
        #location /_/static/ {
        #    autoindex on;
        #}
        #location = /favicon.ico {
        #    root /usr/share/nginx/html/_/static/;
        #}
        #location = /_/health {
        #  default_type application/json;
        #  return 200 '{"status": "ok"}';
        #}
        location / {
            #mirror @noop; # to prefill $request_body
            #mirror_request_body on;
            add_header X-Nginx-ConfKind 'qjsapi' always;
            js_var $norenye_redirect /;
            js_var $norenye_uri /_/;
            js_content norenye.api;
            # js_content norenye.public_api;
            # js_content norenye.public_html;
            # js_content norenye.indexjson;
            # js_content norenye.sessionjson;
            # js_content norenye.configjson;
            # js_content norenye.dbgpage;
            # If you want to expose api via another interface/vhost replace with:
            #   js_content norenye.public_api;  # limit api to /_/, /_/index.html and /_/index.json
            #   js_content norenye.public_html;  # limit api to /_/, /_/index.html
            #   js_content norenye.admin_api;  # all api except /_/, /_/index.html and /_/index.json, '/_/' will return list of API endpoints.
        }
#        location /_admin_/static/ {
#          alias /usr/share/nginx/html/_/static/;
#        }
        location @svc5 {
            add_header X-Nginx-Var2 'norenye_internal_target=$norenye_internal_target' always;
            add_header X-Nginx-Var2 'norenye_target=$norenye_target' always;
            add_header X-Nginx-Var2 'norenye_fail_root=$norenye_fail_root' always;
            add_header X-Nginx-Var2 'norenye_fail=$norenye_fail' always;
            proxy_pass http://unix:/tmp/svc4.sock:;
        }
        location /svc6/ {
            default_type text/plain;
            add_header X-Nginx-Block /svc6/;
            add_header X-Nginx-Host $host;
            return 200 svc6=$request_method=$uri;
        }
        location /_debug_/ {
            try_files @debug @debug;
        }
        location @debug {
            internal;
            set $norenye_uri /_debug_/;
            #set $uri '/_debug_/_dump.json?pretty=1&dump=1';
            #rewrite '^.*$' '/_debug_/_dump.json?pretty=1&dump=1' break;
            set $arg_pretty 1;
            set $arg_dump 1;
            js_content norenye.dbgpage;
        }
        #error_page  404              /404.html;
        error_page  500 502 503 504  /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
    server {
        listen 8001;
        default_type text/plain;
        server_name svc1.example.com;
        location / {
            add_header X-Nginx-Block svc1;
            add_header X-Nginx-Host $host;
            return 200 svc1=$uri;
        }
    }
    server {
        listen 8002;
        default_type text/plain;
        server_name svc2.example.com;
        location / {
            add_header X-Nginx-Block svc2;
            add_header X-Nginx-Host $host;
            return 200 svc2=$uri;
        }
    }
    server {
        listen 8003;
        default_type text/plain;
        server_name svc3.example.com;
        location = /_urls.json {
            default_type application/json;
            return 200 '{"svc1.example.com":{},"svc3.example.com":{}}';
        }
        location / {
            add_header X-Nginx-Block svc3;
            add_header X-Nginx-Host $host;
            #add_header X-Request-Body $request_body;
            #js_set $body norenye.getbody;
            #return 200 'svc3=$request\n$body';
            set $bodypage 'svc3=$request';
            js_content norenye.bodypage;
            #proxy_pass http://127.0.0.1:8002;
            #set $qq 0;
            #if ($qq) {
            #  return 200 'svc3=$request\n$request_body';
            #  #proxy_pass http://127.0.0.1:8001;
            #}
        }
    }
    server {
        listen unix:/tmp/svc4.sock;
        default_type text/plain;
        server_name svc4.example.com;
        location / {
            add_header X-Nginx-Block svc4;
            add_header X-Nginx-Host $host;
            return 200 svc4=$request_method=$uri;
        }
        location = /status/404 {
            add_header X-Nginx-Block svc4;
            add_header X-Nginx-Host $host;
            return 404;
        }
        location = /status/500 {
            add_header X-Nginx-Block svc4;
            add_header X-Nginx-Host $host;
            return 500;
        }
    }
}
