# nginx.0.conf
user  nginx;
worker_processes  3;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

env NORENYE_PERIODIC;
env NORENYE_MODE;

load_module modules/ngx_http_js_module.so;
events {
    worker_connections  1024;
}
http {
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    log_format  json escape=json  '{"remote_addr":"$remote_addr","remote_user":"$remote_user","time_local":"$time_local",'
                      '"request":"$request","status":$status,"body_bytes_sent":$body_bytes_sent,'
                      '"http_referer":"$http_referer","http_user_agent":"$http_user_agent",'
                      '"http_x_forwarded_for":"$http_x_forwarded_for","http_host":"$http_host",'
                      '"http_cookie":"$http_cookie","request_body":"$request_body","proxy_host":"$proxy_host",'
                      '"norenye_internal_target":"$norenye_internal_target","norenye_target":"$norenye_target",'
                      '"norenye_fail_root":"$norenye_fail_root","norenye_fail":"$norenye_fail"}';
    log_subrequest on;
    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;
    keepalive_timeout  65;
    #gzip  on;

    js_path /etc/nginx/js/;
    js_import norenye.js;
    js_shared_dict_zone zone=norenye:1M;
    map $norenye_fail$uri $norenye_fail_root {
        1/ 1;
        default 0;
    }
    server {
        listen 8080;
        server_name *.example.com;
        root /usr/share/nginx/html;
        # See: https://github.com/nginx/njs/issues/907
        # Normal Request object can use any nginx variable,
        # but js_periodic creates pseudo-request that can see
        # only variables from core (and js) module (map/js_var directives).
        js_var $norenye_config '/etc/nginx/norenye.json';
        js_var $norenye_shared_dict norenye;
        js_var $norenye_uri '/_/';
        #js_var $norenye_periodic_disable 1;
        js_set $norenye_autoselected norenye.getautoselected;
        js_set $norenye_fail norenye.getfail;
        js_set $norenye_target norenye.gettarget;
        js_set $norenye_internal_target norenye.getinttarget;
        location @periodic {
          js_periodic norenye.periodic interval=60s;  # update hosts from `service.url` (see config below)
          js_periodic norenye.reloadconf interval=9999999999; # see https://github.com/nginx/njs/issues/914#issuecomment-2914869904
        }
        location /_/static/ {
          # autoindex on;
        }
        location = /favicon.ico {
          root /usr/share/nginx/html/_/static/;
        }
        location = /_/health {
          default_type application/json;
          return 200 '{"status": "ok"}';
        }
        location = /_/_api.json {
          js_var $norenye_api_kind 'api';
          js_content norenye.apijsonpage;
        }
        location = /_/_reloadconf {
          js_content norenye.reloadconf;
        }
        location = /_/redirect {
          js_content norenye.redirectpage;
        }
        location = /_/config.json {
          js_content norenye.configjson;
        }
        location = /_/_debug.json {
          js_content norenye.dbgpage;
        }
        location = /_/_session.json {
          js_content norenye.sessionjson;
        }
        location ~ ^/_/service/(?<service_name>[^/]+)/(?<host_name>[^/]+)/?$ {
          js_content norenye.apihost;
        }
        location ~ ^/_/service/(?<service_name>[^/]+)/?$ {
          js_content norenye.apiservicehosts;
        }
        location = /_/service/ {
          js_content norenye.apiservices;
        }
        location = /_/index.json {
          js_content norenye.indexjson;
        }
        location = /_/index.html {
          js_content norenye.indexhtml;
        }
        location = /_/ {
          js_content norenye.indexhtml;
        }
        location /_admin_/static/ {
          alias /usr/share/nginx/html/_/static/;
        }
        location = /_admin_/health {
          #default_type application/json;
          #return 200 '{"status": "ok"}';
          js_content norenye.healthcheck;
        }
        location = /_admin_/ {
          set $norenye_uri /_admin_/;
          js_content norenye.adminapijson;
        }
        location = /_admin_/_api.json {
          set $norenye_uri /_admin_/;
          js_content norenye.adminapijson;
        }
        location = /_admin_/_reloadconf {
          js_content norenye.reloadconf;
        }
        location = /_admin_/config.json {
          js_content norenye.configjson;
        }
        location = /_admin_/_debug.json {
          js_content norenye.dbgpage;
        }
        location = /_admin_/_session.json {
          js_content norenye.sessionjson;
        }
        location ~ ^/_admin_/service/(?<service_name>[^/]+)/(?<host_name>[^/]+)/?$ {
          js_content norenye.apihost;
        }
        location ~ ^/_admin_/service/(?<service_name>[^/]+)/?$ {
          js_content norenye.apiservicehosts;
        }
        location = /_admin_/service/ {
          js_content norenye.apiservices;
        }
        location / {
            proxy_set_header Host $host;
            add_header X-Nginx-Var 'norenye_internal_target=$norenye_internal_target' always;
            add_header X-Nginx-Var 'norenye_target=$norenye_target' always;
            add_header X-Nginx-Var 'norenye_fail_root=$norenye_fail_root' always;
            add_header X-Nginx-Var 'norenye_fail=$norenye_fail' always;
            if ($norenye_target) {
              add_header X-Nginx-Var0t 'norenye_target=$norenye_target';
              proxy_pass $norenye_target;
            }
            if ($norenye_autoselected) {
              add_header X-Nginx-Var0a 'norenye_autoselected=$norenye_autoselected';
              return 307 '/_/?uri=$uri&a=1';
            }
            if ($norenye_fail_root) {
              add_header X-Nginx-Var0r 'norenye_fail_root=$norenye_fail_root';
              return 303 '/_/';
            }
            if ($norenye_fail) {
              add_header X-Nginx-Var0f 'norenye_fail=$norenye_fail';
              return 303 '/_/?uri=$uri';
            }
            try_files nonexistant.html $norenye_internal_target;
        }
        location @svc5 {
            add_header X-Nginx-Var2 'norenye_internal_target=$norenye_internal_target' always;
            add_header X-Nginx-Var2 'norenye_target=$norenye_target' always;
            add_header X-Nginx-Var2 'norenye_fail_root=$norenye_fail_root' always;
            add_header X-Nginx-Var2 'norenye_fail=$norenye_fail' always;
            proxy_pass http://unix:/tmp/svc4.sock:;
        }
        location /svc6/ {
            default_type text/plain;
            add_header X-Nginx-Block /svc6/;
            add_header X-Nginx-Host $host;
            return 200 svc6=$request_method=$uri;
        }
    }
    server {
        listen 8001;
        default_type text/plain;
        server_name svc1.example.com;
        location / {
            add_header X-Nginx-Block svc1;
            add_header X-Nginx-Host $host;
            return 200 svc1=$uri;
        }
    }
    server {
        listen 8002;
        default_type text/plain;
        server_name svc2.example.com;
        location / {
            add_header X-Nginx-Block svc2;
            add_header X-Nginx-Host $host;
            return 200 svc2=$uri;
        }
    }
    server {
        listen 8003;
        default_type text/plain;
        server_name svc3.example.com;
        location = /_urls.json {
            default_type application/json;
            return 200 '{"svc1.example.com":{},"svc3.example.com":{}}';
        }
        location / {
            add_header X-Nginx-Block svc3;
            add_header X-Nginx-Host $host;
            set $bodypage 'svc3=$request';
            js_content norenye.bodypage;
        }
    }
    server {
        listen unix:/tmp/svc4.sock;
        default_type text/plain;
        server_name svc4.example.com;
        location / {
            add_header X-Nginx-Block svc4;
            add_header X-Nginx-Host $host;
            return 200 svc4=$request_method=$uri;
        }
        location = /status/404 {
            add_header X-Nginx-Block svc4;
            add_header X-Nginx-Host $host;
            return 404;
        }
        location = /status/500 {
            add_header X-Nginx-Block svc4;
            add_header X-Nginx-Host $host;
            return 500;
        }
    }
}
